{
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(npm run test:db:*)",
      "Bash(sqlite3:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(npm test)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npm run test:legacy:*)",
      "Bash(rm:*)",
      "Bash(npm uninstall:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run build:*)",
      "Bash(npm run test:*)",
      "Bash(npm run electron:dev:*)",
      "Bash(npm rebuild:*)",
      "Bash(npx:*)",
      "Bash(electron --version)",
      "Bash(node:*)",
      "Bash(ls:*)",
      "Bash(pkill:*)",
      "Bash(NODE_ENV=test npx playwright test --project=electron-headless --grep \"単語追加機能\")",
      "Bash(NODE_ENV=test npx playwright test --project=electron-headless --grep \"単語追加機能.*単語追加ボタンクリックでモーダルが開く\")",
      "Bash(NODE_ENV=test npx playwright test --project=electron-headless --grep \"単語追加機能\" --workers=1)",
      "Bash(grep:*)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"ゲーム追加が完全に動作する\")",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"Game Add Functionality\")",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"Game Add Functionality\" --workers=1)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"ゲーム名を入力して保存できる\" --workers=1)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"単語情報を入力して保存できる\" --workers=1)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"単語追加機能\" --workers=1)",
      "Bash(rg:*)",
      "Bash(chmod:*)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"ゲーム追加ボタンクリックでモーダルが開く\" --workers=1)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"アプリが起動してelectronAPIが利用可能\" --workers=1 --timeout=90000)",
      "Bash(NODE_ENV=test npx playwright test --project=electron --grep \"アプリが起動してelectronAPIが利用可能\" --workers=1)",
      "Bash(npm ci:*)",
      "Bash(npm test:*)",
      "Bash(find:*)",
      "Bash(timeout 10s npm run electron:dev)",
      "Bash(gtimeout 10s npm run electron:dev)",
      "Bash(npm run rebuild:node:*)",
      "Bash(NODE_ENV=test npm run electron:dev)",
      "Bash(NODE_ENV=test timeout 10s npm run electron:dev)",
      "Bash(npm run rebuild:electron:*)",
      "Bash(mv:*)",
      "Bash(time npm test)",
      "Bash(time npm run test:e2e)",
      "Bash(npm run:*)",
      "Bash(NODE_ENV=test npx playwright test --project=electron tests/e2e/app.spec.ts -g \"アプリが正常に起動する\" --timeout=60000)",
      "Bash(NODE_ENV=test node dist/main/main.js --no-sandbox --disable-setuid-sandbox)",
      "Bash(NODE_ENV=test npx playwright test --project=electron tests/e2e/app.spec.ts -g \"アプリが正常に起動する\" --timeout=30000)",
      "WebFetch(domain:www.electronjs.org)",
      "Bash(npm ls:*)",
      "Bash(NODE_ENV=test npx playwright test --project=electron tests/e2e/app.spec.ts -g \"アプリが正常に起動する\" --timeout=15000 --verbose)",
      "Bash(NODE_ENV=test npx playwright test --project=electron tests/e2e/app.spec.ts -g \"アプリが正常に起動する\" --timeout=15000 --reporter=line)",
      "Bash(NODE_ENV=test npx playwright test --project=electron tests/e2e/app.spec.ts -g \"アプリが正常に起動する\" --timeout=20000)",
      "Bash(npm help:*)",
      "Bash(npm start)",
      "Bash(NODE_ENV=production npm run build)",
      "Bash(timeout 10s npm start)",
      "Bash(gtimeout 10s npm start)",
      "Bash(./node_modules/.bin/biome:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(git rm:*)",
      "Bash(NODE_ENV=production node -e \"\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\n\n// Simulate what Electron would do\nconst userDataPath = path.join(os.homedir(), 'Library', 'Application Support', 'game-dict');\nconst prodDbPath = path.join(userDataPath, 'game-dict.db');\n\nconsole.log('Production database path would be:', prodDbPath);\nconsole.log('Production database exists:', fs.existsSync(prodDbPath));\n\nif (fs.existsSync(prodDbPath)) {\n  const stats = fs.statSync(prodDbPath);\n  console.log('Production database size:', stats.size, 'bytes');\n  console.log('Production database modified:', stats.mtime);\n}\n\n// Check if there are other databases in the user data directory\nif (fs.existsSync(userDataPath)) {\n  console.log('Files in user data directory:');\n  const files = fs.readdirSync(userDataPath);\n  files.forEach(file => {\n    const filePath = path.join(userDataPath, file);\n    const stats = fs.statSync(filePath);\n    console.log('  -', file, '(', stats.size, 'bytes,', stats.mtime, ')');\n  });\n}\n\")",
      "Bash(NODE_ENV=production node -e \"console.log('NODE_ENV:', process.env.NODE_ENV)\")",
      "Bash(timeout 8s npm start)",
      "Bash(gtimeout:*)",
      "Bash(NODE_ENV=production node -e \"\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\n\n// Simulate what Electron would do\nconst userDataPath = path.join(os.homedir(), 'Library', 'Application Support', 'game-dict');\nconst prodDbPath = path.join(userDataPath, 'game-dict.db');\n\nconsole.log('Production database path would be:', prodDbPath);\nconsole.log('Production database exists:', fs.existsSync(prodDbPath));\n\nif (fs.existsSync(prodDbPath)) {\n  const stats = fs.statSync(prodDbPath);\n  console.log('Production database size:', stats.size, 'bytes');\n  console.log('Production database modified:', stats.mtime);\n}\n\n// Check if there are other databases in the user data directory\nif (fs.existsSync(userDataPath)) {\n  console.log('Files in user data directory:');\n  const files = fs.readdirSync(userDataPath);\n  files.forEach(file => {\n    const filePath = path.join(userDataPath, file);\n    const stats = fs.statSync(filePath);\n    console.log('  -', file, '(', stats.size, 'bytes,', stats.mtime, ')');\n  });\n}\n\")"
    ],
    "deny": []
  }
}